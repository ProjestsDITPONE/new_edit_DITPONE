"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var _moment = _interopRequireDefault(require("moment"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var styles = _reactNative.StyleSheet.create({
  containerStyle: {
    flex: 1,
    flexDirection: 'row'
  },
  yearStyle: {
    flex: 1,
    marginRight: 5
  },
  monthStyle: {
    flex: 1,
    marginRight: 5
  },
  dayStyle: {
    flex: 1
  },
  textStyle: {
    fontSize: 16
  }
});

var pad = function pad(n, z) {
  return (Array(z).join('0') + n).slice(-z);
};

var SimplerDatePicker = /*#__PURE__*/function (_React$Component) {
  _inherits(SimplerDatePicker, _React$Component);

  var _super = _createSuper(SimplerDatePicker);

  _createClass(SimplerDatePicker, null, [{
    key: "extractStateFromMoment",
    value: function extractStateFromMoment(moment, minDate, maxDate) {
      if (!moment) {
        return {
          year: -1,
          month: -1,
          day: -1
        };
      }

      var yearData = SimplerDatePicker.getYearData(minDate, maxDate);
      var year = yearData.indexOf(moment.format('YYYY'));

      if (year < 0) {
        return {
          year: -1,
          month: -1,
          day: -1
        };
      }

      var monthData = SimplerDatePicker.getMonthData(minDate, maxDate);
      var month = monthData.indexOf(moment.format('MMMM'));

      if (month < 0) {
        return {
          year: year,
          month: -1,
          day: -1
        };
      }

      var dayData = SimplerDatePicker.getDayData(minDate, maxDate, year, yearData, month);
      var day = dayData.indexOf(Number.parseInt(moment.format('D')));
      return {
        year: year,
        month: month,
        day: day
      };
    }
  }]);

  function SimplerDatePicker(props) {
    var _this;

    _classCallCheck(this, SimplerDatePicker);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "onYearPicked", function (year) {
      var _this$props = _this.props,
          minDate = _this$props.minDate,
          maxDate = _this$props.maxDate;
      var _this$state = _this.state,
          month = _this$state.month,
          day = _this$state.day;
      var yearData = SimplerDatePicker.getYearData(minDate, maxDate);
      var monthData = SimplerDatePicker.getMonthData(minDate, maxDate);
      var monthValid = SimplerDatePicker.isMonthValid(minDate, maxDate, yearData, year, month);
      var dayValid = SimplerDatePicker.isDayValid(minDate, maxDate, yearData, year, monthData, month, day);
      return _this.setState({
        year: year,
        month: monthValid ? month : -1,
        day: dayValid && monthValid ? day : -1
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onMonthPicked", function (month) {
      var _this$props2 = _this.props,
          minDate = _this$props2.minDate,
          maxDate = _this$props2.maxDate;
      var _this$state2 = _this.state,
          year = _this$state2.year,
          day = _this$state2.day;
      var yearData = SimplerDatePicker.getYearData(minDate, maxDate);
      var monthData = SimplerDatePicker.getMonthData(minDate, maxDate);
      var dayValid = SimplerDatePicker.isDayValid(minDate, maxDate, yearData, year, monthData, month, day);
      return _this.setState({
        month: month,
        day: dayValid ? day : -1
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onDayPicked", function (day) {
      return _this.setState({
        day: day
      });
    });

    var date = props.date,
        _minDate = props.minDate,
        _maxDate = props.maxDate;
    _this.state = _objectSpread({}, SimplerDatePicker.extractStateFromMoment(date, _minDate, _maxDate));
    return _this;
  } //componentDidMount() {
  //  // XXX: Force the caller to sync with the currently selected
  //  //      date. This is important for times where the date has
  //  //      been selected, but it is invalid given the range.
  //  const { minDate, maxDate, onDatePicked } = this.props;
  //  const { year, month, day } = this.state;
  //  return onDatePicked(
  //    SimplerDatePicker
  //      .getMomentFromState(
  //        minDate,
  //        maxDate,
  //        year,
  //        month,
  //        day,
  //      ),
  //  );
  //}


  _createClass(SimplerDatePicker, [{
    key: "componentWillUpdate",
    value: function componentWillUpdate(nextProps, nextState) {
      var date = nextProps.date,
          minDate = nextProps.minDate,
          maxDate = nextProps.maxDate,
          onDatePicked = nextProps.onDatePicked;
      var day = nextState.day,
          month = nextState.month,
          year = nextState.year;
      var userChangedDate = day !== this.state.day || month !== this.state.month || year !== this.state.year;

      if (!!date && date !== this.props.date) {
        var newState = SimplerDatePicker.extractStateFromMoment(date, minDate, maxDate);
        var newDay = newState.day,
            newMonth = newState.month,
            newYear = newState.year;
        var yearChanged = newYear !== year;
        var monthChanged = newMonth !== month;
        var dayChanged = newDay !== day;

        if (yearChanged || monthChanged || dayChanged) {
          return this.setState(_objectSpread({}, newState));
        }
      } else if (userChangedDate) {
        return onDatePicked(SimplerDatePicker.getMomentFromState(minDate, maxDate, year, month, day));
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          containerStyle = _this$props3.containerStyle,
          yearStyle = _this$props3.yearStyle,
          monthStyle = _this$props3.monthStyle,
          dayStyle = _this$props3.dayStyle,
          textStyle = _this$props3.textStyle,
          minDate = _this$props3.minDate,
          maxDate = _this$props3.maxDate,
          date = _this$props3.date,
          mode = _this$props3.mode,
          getPromptString = _this$props3.getPromptString,
          yearName = _this$props3.yearName,
          monthName = _this$props3.monthName,
          dayName = _this$props3.dayName,
          yearPickerProps = _this$props3.yearPickerProps,
          monthPickerProps = _this$props3.monthPickerProps,
          dayPickerProps = _this$props3.dayPickerProps;
      var _this$state3 = this.state,
          year = _this$state3.year,
          month = _this$state3.month,
          day = _this$state3.day;
      var yearData = SimplerDatePicker.getYearData(minDate, maxDate);
      var monthData = SimplerDatePicker.getMonthData(minDate, maxDate);
      var dayData = SimplerDatePicker.getDayData(minDate, maxDate, year, yearData, month);
      return /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
        style: containerStyle
      }, /*#__PURE__*/_react["default"].createElement(_reactNative.Picker, {
        enabled: true,
        selectedValue: year,
        value: year,
        style: [yearStyle, textStyle],
        prompt: getPromptString(yearName),
        mode: mode,
        onValueChange: function onValueChange(i) {
          var year = Number.parseInt(i);
          return _this2.onYearPicked(Number.isNaN(year) ? -1 : year);
        }
      }, SimplerDatePicker.getPickerItems(getPromptString('Year'), yearData, undefined, yearPickerProps)), /*#__PURE__*/_react["default"].createElement(_reactNative.Picker, {
        enabled: !(year < 0),
        style: monthStyle,
        mode: mode,
        value: month,
        selectedValue: month,
        onValueChange: function onValueChange(i) {
          var month = Number.parseInt(i);
          return _this2.onMonthPicked(Number.isNaN(month) ? -1 : month);
        }
      }, SimplerDatePicker.getPickerItems(getPromptString(monthName), monthData, function (month, i) {
        return !SimplerDatePicker.isMonthValid(minDate, maxDate, yearData, year, i);
      }, monthPickerProps)), /*#__PURE__*/_react["default"].createElement(_reactNative.Picker, {
        enabled: !(month < 0),
        style: dayStyle,
        mode: mode,
        value: day,
        selectedValue: day,
        onValueChange: function onValueChange(i) {
          var day = Number.parseInt(i);
          return _this2.onDayPicked(Number.isNaN(day) ? -1 : day);
        }
      }, SimplerDatePicker.getPickerItems(getPromptString(dayName), dayData, function (day, i) {
        return !SimplerDatePicker.isDayValid(minDate, maxDate, yearData, year, monthData, month, i);
      }, dayPickerProps)));
    }
  }]);

  return SimplerDatePicker;
}(_react["default"].Component);

_defineProperty(SimplerDatePicker, "getYearData", function () {
  var minDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _moment["default"])();
  var maxDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _moment["default"])();
  var min = Number.parseInt(minDate.format('YYYY'));
  var max = Number.parseInt(maxDate.format('YYYY'));
  return [max].concat(_toConsumableArray(_toConsumableArray(Array(max - min)).map(function (e, i, arr) {
    return max - i;
  })), [min]).filter(function (e, i, arr) {
    return arr.indexOf(e) === i;
  }).map(function (e) {
    return "".concat(e);
  });
});

_defineProperty(SimplerDatePicker, "getMonthData", function () {
  var minDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _moment["default"])();
  var maxDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _moment["default"])();
  return _moment["default"].months();
});

_defineProperty(SimplerDatePicker, "getDayData", function () {
  var minDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _moment["default"])();
  var maxDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _moment["default"])();
  var year = arguments.length > 2 ? arguments[2] : undefined;
  var yearData = arguments.length > 3 ? arguments[3] : undefined;
  var month = arguments.length > 4 ? arguments[4] : undefined;

  if (year < 0 || month < 0) {
    return [];
  }

  var date = (0, _moment["default"])("".concat(yearData[year], "/").concat(pad(month + 1, 2), "/1"));
  var daysInMonth = year >= 0 && month >= 0 ? date.daysInMonth() : 0;
  return _toConsumableArray(Array(daysInMonth)).map(function (e, i) {
    return i + 1;
  });
});

_defineProperty(SimplerDatePicker, "isMonthValid", function (minDate, maxDate, yearData, year, month) {
  if (year < 0 || month < 0) {
    return false;
  }

  var monthData = SimplerDatePicker.getMonthData(minDate, maxDate);
  var dayData = SimplerDatePicker.getDayData(minDate, maxDate, year, yearData, month);
  return dayData.reduce(function (res, day, i) {
    return res || SimplerDatePicker.isDayValid(minDate, maxDate, yearData, year, monthData, month, i);
  }, false);
});

_defineProperty(SimplerDatePicker, "isDayValid", function (minDate, maxDate, yearData, year, monthData, month, day) {
  if (year < 0 || month < 0 || day < 0) {
    return false;
  }

  return SimplerDatePicker.isWithinBounds(minDate, maxDate, (0, _moment["default"])("".concat(yearData[year], "/").concat(pad(month + 1, 2), "/").concat(pad(day + 1, 2)), 'YYYY/MM/DD'));
});

_defineProperty(SimplerDatePicker, "isWithinBounds", function (minDate, maxDate, moment) {
  var min = (0, _moment["default"])(minDate).subtract(1, 'days');
  var max = (0, _moment["default"])(maxDate).add(1, 'days');
  return moment.isBetween(minDate, maxDate, //min,
  //max,
  null, '[]');
});

_defineProperty(SimplerDatePicker, "getPickerItems", function () {
  var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Select Item';
  var items = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var shouldHide = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {
    return false;
  };
  var pickerProps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  return [/*#__PURE__*/_react["default"].createElement(_reactNative.Picker.Item, _extends({}, pickerProps, {
    value: null,
    label: prompt
  })), items.map(function (e, i) {
    return !shouldHide(e, i) && /*#__PURE__*/_react["default"].createElement(_reactNative.Picker.Item, _extends({}, pickerProps, {
      key: e,
      label: "".concat(e),
      value: i
    }));
  })].filter(function (e) {
    return !!e;
  });
});

_defineProperty(SimplerDatePicker, "getMomentFromState", function (minDate, maxDate, year, month, day) {
  var yearData = SimplerDatePicker.getYearData(minDate, maxDate);

  if (day >= 0 && month >= 0 && year >= 0) {
    var moment = (0, _moment["default"])("".concat(yearData[year], "-").concat(pad(month + 1, 2), "-").concat(pad(day + 1, 2)), 'YYYY-MM-DD');

    if (SimplerDatePicker.isWithinBounds(minDate, maxDate, moment)) {
      return moment;
    }
  }

  return null;
});

SimplerDatePicker.propTypes = {
  containerStyle: _propTypes["default"].shape({}),
  yearStyle: _propTypes["default"].shape({}),
  monthStyle: _propTypes["default"].shape({}),
  dayStyle: _propTypes["default"].shape({}),
  textStyle: _propTypes["default"].shape({}),
  minDate: _propTypes["default"].shape({}),
  maxDate: _propTypes["default"].shape({}),
  date: _propTypes["default"].shape({}),
  mode: _propTypes["default"].string,
  getPromptString: _propTypes["default"].func,
  yearName: _propTypes["default"].string,
  monthName: _propTypes["default"].string,
  dayName: _propTypes["default"].string,
  onDatePicked: _propTypes["default"].func,
  yearPickerProps: _propTypes["default"].shape({}),
  monthPickerProps: _propTypes["default"].shape({}),
  dayPickerProps: _propTypes["default"].shape({})
};
SimplerDatePicker.defaultProps = {
  containerStyle: styles.containerStyle,
  yearStyle: styles.yearStyle,
  monthStyle: styles.monthStyle,
  dayStyle: styles.dayStyle,
  textStyle: styles.textStyle,
  minDate: (0, _moment["default"])().subtract(100, 'years'),
  maxDate: (0, _moment["default"])(),
  date: null,
  mode: 'dropdown',
  getPromptString: function getPromptString(name) {
    return "Select ".concat(name);
  },
  yearName: 'Year',
  monthName: 'Month',
  dayName: 'Day',
  onDatePicked: function onDatePicked(moment) {
    var date = moment && moment.format('YYYY/MM/DD');

    if (_reactNative.Platform.OS !== 'web') {
      _reactNative.Alert.alert(date);
    }

    return console.log(date);
  },
  yearPickerProps: {},
  monthPickerProps: {},
  dayPickerProps: {}
};
var _default = SimplerDatePicker;
exports["default"] = _default;